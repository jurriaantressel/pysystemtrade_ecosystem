
- name: Debug output
  debug:
    msg: "github_vault_path: {{ github_vault_path }}"


#- name: Retrieve Test GitHub credentials from Vault
#  shell: |
#    echo $(vault kv get -field=ACCESS_TOKEN altakleos/version-control/github/repositories/bc-utils)
#  environment:
#    VAULT_ADDR: "{{ lookup('env', 'VAULT_ADDR') }}"
#    VAULT_TOKEN: "{{ lookup('env', 'VAULT_TOKEN') }}"
#  register: vault_test_output
#  no_log: true
#
#
#- name: Vault Debug output
#  debug:
#    msg: "vault_test_output: {{ vault_test_output }}"


- name: Retrieve GitHub credentials from Vault
  shell: |
    token=$(vault kv get -field=ACCESS_TOKEN {{ github_vault_path }} 2>/dev/null || echo "")
    name=$(vault kv get -field=NAME {{ github_vault_path }} 2>/dev/null || echo "")
    owner=$(vault kv get -field=OWNER {{ github_vault_path }} 2>/dev/null || echo "")
    echo $token $name $owner
  environment:
    VAULT_ADDR: "{{ lookup('env', 'VAULT_ADDR') }}"
    VAULT_TOKEN: "{{ lookup('env', 'VAULT_TOKEN') }}"
  register: vault_output
  no_log: true

- name: Debug output
  debug:
    msg: "vault_output.stdout: {{ vault_output.stdout }}"
  #swhen: vault_output.stdout == "" or ' ' not in vault_output.stdout

- name: Set GitHub credentials
  set_fact:
    github_token: "{{ vault_output.stdout.split(' ')[0] }}"
    repo_name: "{{ vault_output.stdout.split(' ')[1] }}"
    repo_owner: "{{ vault_output.stdout.split(' ')[2] }}"
  when: vault_output.stdout != "" and ' ' in vault_output.stdout

- name: Fail if necessary data is missing
  fail:
    msg: "Required GitHub credentials not retrieved from Vault. Please check the vault path and fields. Output was: {{ vault_output.stdout }}"
  when: "' ' not in vault_output.stdout"

- name: Clone GitHub repository
  git:
    repo: "https://{{ github_token }}@github.com/{{ repo_owner }}/{{ repo_name }}.git"
    dest: "~/workspace/{{ repo_name }}"
    clone: yes
    update: yes
  when: repo_name is defined and repo_owner is defined and github_token is defined

#- name: Ensure the project directory is properly owned
#  file:
#    path: "~/workspace/{{ repo_name }}"
#    state: directory
#    owner: root
#    group: root

