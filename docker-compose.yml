version: '3.9'

services:

  mongo_db:
      container_name: mongo_db${NAME_SUFFIX}
      image: mongo
      restart: on-failure
      volumes:
        - mongo_db:/data/db
        - mongo_conf:/data/configdb
      networks:
        channel:
          ipv4_address: ${IPV4_NETWORK_PART}0.2
      logging:
        options:
          max-size: "5m"
          max-file: "3"

  db_backup:
      image: alpine
      container_name: db_backup${NAME_SUFFIX}
      volumes:
        - mongo_db:/data/db
        - mongo_conf:/data/configdb
        - ${DB_BACKUP_PATH}:/backup
      command: sh -c "tar -zcvf /backup/mongo.tar.gz /data/"
      init: true
      logging:
        options:
          max-size: "200k"
          max-file: "1"

  db_restore:
      image: alpine
      profiles: ["restore"]
      container_name: db_restore${NAME_SUFFIX}
      volumes:
        - mongo_db:/data/db
        - mongo_conf:/data/configdb
        - ${DB_BACKUP_PATH}:/backup
      command: sh -c "cd /data/ && tar -zxvf /backup/mongo.tar.gz --strip 1"
      init: true
      logging:
        options:
          max-size: "200k"
          max-file: "1"

  ib_gateway:
      container_name: ib_gateway${NAME_SUFFIX}
      image: ghcr.io/extrange/ibkr:stable
      restart: always
      ports:
        - "6082:6080"
        - "8888:8888"
      environment:
        USERNAME: ${TWSUSERID}
        PASSWORD: ${TWSPASSWORD}
        GATEWAY_OR_TWS: tws #gateway
        TWOFA_TIMEOUT_ACTION: "restart"
        IBC_TradingMode: ${TRADINGMODE}
        IBC_ReadOnlyApi: no
        IBC_SecondFactorDevice: "IB Key"
        IBC_ReloginAfterSecondFactorAuthenticationTimeout: yes
        IBC_AcceptNonBrokerageAccountWarning: yes
        IBC_LogStructureScope: known
        IBC_LogStructureWhen: openclose
        IBC_ExistingSessionDetectedAction: primary
        IBC_AutoRestartTime: "06:00 PM"
        IBC_AcceptIncomingConnectionAction: "reject"
        IBC_ConfirmCryptoCurrencyOrders: transmit
      volumes:
        - gateway_jts:/root/Jts
      networks:
        channel:
          ipv4_address: ${IPV4_NETWORK_PART}0.3
      logging:
        options:
          max-size: "1m"
          max-file: "2"
      ulimits:
        nofile:
          soft: 10000
          hard: 10000

  stack_handler:
      image: pysystemtrade
      build:
        context: ./pysystemtrade
        dockerfile: ./Dockerfile
        args:
          REPO_USER: ${REPO_USER}
          REPO_TOKEN: ${REPO_TOKEN}
          PYSYS_REPO: ${PYSYS_REPO}
          PRIVATE_REPO: ${PRIVATE_REPO}
          SCRIPT_PATH: ${SCRIPT_PATH}
          PYSYS_PRIVATE_CONFIG_DIR: ${PYSYS_PRIVATE_CONFIG_DIR}
          PYSYS_CODE: ${PYSYS_CODE}
          IB_IP_ADDRESS: ${IB_IP_ADDRESS}
          IB_PORT: ${IB_PORT}
          IB_OFFSET: ${IB_OFFSET}
          IB_ACCOUNT: ${IB_ACCOUNT}
          PARQUET_STORE: ${PARQUET_STORE}
          MONGO_HOST: ${MONGO_HOST}
          MONGO_DB: ${MONGO_DB}
          EMAIL_ADDRESS: ${EMAIL_ADDRESS}
          EMAIL_PWD: ${EMAIL_PWD}
          EMAIL_SERVER: ${EMAIL_SERVER}
          EMAIL_TO: ${EMAIL_TO}
          EMAIL_PORT: ${EMAIL_PORT}
      container_name: stack_handler${NAME_SUFFIX}
      restart: on-failure
      environment:
        TZ: ${TZ}
        IPV4_NETWORK_PART: ${IPV4_NETWORK_PART}
      command: ["/bin/bash", "-c", "command_scripts/stack_handler_commands.bash"]
      depends_on:
        - ib_gateway
        - mongo_db
      volumes:
        - ./logs/stack_handler:/home/logs
        - parquet_store:/data/parquet_store
      networks:
        channel:
          ipv4_address: ${IPV4_NETWORK_PART}0.4
      stdin_open: true
      tty: true
      init: true
      logging:
        options:
          max-size: "10m"
          max-file: "3"

  price_updates:
      image: pysystemtrade
      container_name: price_updates${NAME_SUFFIX}
      restart: on-failure
      environment:
        TZ: ${TZ}
        IPV4_NETWORK_PART: ${IPV4_NETWORK_PART}
      command: ["/bin/bash", "-c", "command_scripts/daily_prices_updates_commands.bash"]
      depends_on:
        - ib_gateway
        - mongo_db
      volumes:
        - ./logs/price_updates:/home/logs
      networks:
        channel:
          ipv4_address: ${IPV4_NETWORK_PART}0.5
      stdin_open: true
      tty: true
      init: true
      logging:
        options:
          max-size: "10m"
          max-file: "3"

  capital_update:
      image: pysystemtrade
      container_name: capital_update${NAME_SUFFIX}
      restart: on-failure
      environment:
        TZ: ${TZ}
        IPV4_NETWORK_PART: ${IPV4_NETWORK_PART}
      command: ["/bin/bash", "-c", "command_scripts/capital_update_commands.bash"]
      depends_on:
        - ib_gateway
        - mongo_db
        - stack_handler    # needed to avoid building same image twice
      volumes:
        - ./logs/capital_update:/home/logs
      networks:
        channel:
          ipv4_address: ${IPV4_NETWORK_PART}0.9
      stdin_open: true
      tty: true
      init: true
      logging:
        options:
          max-size: "10m"
          max-file: "3"

  cleaner:
      image: pysystemtrade
      container_name: cleaner${NAME_SUFFIX}
      restart: on-failure
      environment:
        TZ: ${TZ}
        IPV4_NETWORK_PART: ${IPV4_NETWORK_PART}
      command: ["/bin/bash", "-c", "command_scripts/cleaner_commands.bash"]
      depends_on:
        - mongo_db
        - stack_handler    # needed to avoid building same image twice
      networks:
        channel:
          ipv4_address: ${IPV4_NETWORK_PART}0.10
      stdin_open: true
      tty: true
      init: true
      logging:
        options:
          max-size: "200k"
          max-file: "1"

  daily_processes:
      image: pysystemtrade
      container_name: daily_processes${NAME_SUFFIX}
      environment:
        TZ: ${TZ}
        IPV4_NETWORK_PART: ${IPV4_NETWORK_PART}
      command: ["/bin/bash", "-c", "command_scripts/daily_processes_commands.bash"]
      depends_on:
        - ib_gateway
        - mongo_db
        - stack_handler    # needed to avoid building same image twice
      volumes:
        - ./reports:/home/reports
        - ./backtests:/home/backtests
        - ./logs/daily_processes:/home/logs
      networks:
        channel:
          ipv4_address: ${IPV4_NETWORK_PART}0.8
      stdin_open: true
      tty: true
      init: true
      logging:
        options:
          max-size: "10m"
          max-file: "3"

  jupyter:
      image: pysystemtrade_jupyter
      build:
        context: jupyter
        dockerfile: ./Dockerfile
        args:
          REPO_USER: ${REPO_USER}
          REPO_TOKEN: ${REPO_TOKEN}
          PYSYS_REPO: ${PYSYS_REPO}
          PRIVATE_REPO: ${PRIVATE_REPO}
          SCRIPT_PATH: ${SCRIPT_PATH}
          PYSYS_PRIVATE_CONFIG_DIR: ${PYSYS_PRIVATE_CONFIG_DIR}
          PYSYS_CODE: ${PYSYS_CODE}
          IB_IP_ADDRESS: ${IB_IP_ADDRESS}
          IB_PORT: ${IB_PORT}
          IB_OFFSET: ${IB_OFFSET}
          IB_ACCOUNT: ${IB_ACCOUNT}
          PARQUET_STORE: ${PARQUET_STORE}
          MONGO_HOST: ${MONGO_HOST}
          MONGO_DB: ${MONGO_DB}
      container_name: jupyter${NAME_SUFFIX}
      restart: always
      environment:
        TZ: ${TZ}
      ports:
        - "8889:8888"
      volumes:
        - ./reports:/home/reports
        - ./csv_backup:/home/csv_backup
        - ./backtests:/home/backtests
        - ./logs/jupyter:/home/logs
      depends_on:
        - ib_gateway
        - mongo_db
      networks:
        channel:
          ipv4_address: ${IPV4_NETWORK_PART}0.6
      logging:
        options:
          max-size: "200k"
          max-file: "1"

  csv_backup:
      image: pysystemtrade
      depends_on:
        - stack_handler    # needed to avoid building same image twice
        - mongo_db
      container_name: csv_backup${NAME_SUFFIX}
      environment:
        TZ: ${TZ}
      networks:
        channel:
          ipv4_address: ${IPV4_NETWORK_PART}0.7
      volumes:
        - ./csv_backup:/home/csv_backup
      command: sh -c "cd sysproduction/linux/scripts; backup_arctic_to_csv"
      init: true
      logging:
        options:
          max-size: "200k"
          max-file: "1"

  barchart_quotes:
      container_name: barchart_quotes${NAME_SUFFIX}
      profiles: ["quotes"]
      user: "99:100"
      image: makutaku/bc-utils:1.3.0
      restart: on-failure
      volumes:
        - ${MARKET_DATA_PATH}/barchart/:/bc-utils/data
      network_mode: bridge
      environment:
        TZ: ${TZ}
        BARCHART_DOWNLOADER_FACTORY: create_barchart_downloader
        BARCHART_USERNAME: ${BARCHART_USERNAME}
        BARCHART_PASSWORD: ${BARCHART_PASSWORD}
        BARCHART_DRY_RUN: False
        BARCHART_START_YEAR: 2000
        BARCHART_END_YEAR: 2025
        BARCHART_OUTPUT_DIR: /bc-utils/data
        BARCHART_DAILY_DOWNLOAD_LIMIT: 230
        BARCHART_RANDOM_SLEEP_IN_SEC: 7
        BARCHART_MARKET_FILES: /bc-utils/data/barchart.config.json
        BARCHART_LOGGING_LEVEL: info
        RUN_ON_STARTUP: True
        BARCHART_BACKUP_DATA: True
        BARCHART_FORCE_BACKUP: False
      logging:
        options:
          max-size: "5m"
          max-file: "3"

  yahoo_quotes:
      container_name: yahoo_quotes${NAME_SUFFIX}
      profiles: ["quotes"]
      user: "99:100"
      image: makutaku/bc-utils:1.3.0
      restart: on-failure
      volumes:
        - ${MARKET_DATA_PATH}/yahoo/:/bc-utils/data
      network_mode: bridge
      environment:
        TZ: ${TZ}
        BARCHART_DOWNLOADER_FACTORY: "create_yahoo_downloader"
        BARCHART_DRY_RUN: "False"
        BARCHART_START_YEAR: "2000"
        BARCHART_END_YEAR: "2025"
        BARCHART_OUTPUT_DIR: "/bc-utils/data"
        BARCHART_RANDOM_SLEEP_IN_SEC: 1
        BARCHART_MARKET_FILES: "/bc-utils/data/yahoo.config.json"
        BARCHART_LOGGING_LEVEL: "info"
        RUN_ON_STARTUP: "True"
        BARCHART_BACKUP_DATA: "True"
        BARCHART_FORCE_BACKUP: "False"
      logging:
        options:
          max-size: "5m"
          max-file: "3"

  ibkr_quotes:
      container_name: ibkr_quotes${NAME_SUFFIX}
      profiles: ["quotes"]
      user: "99:100"
      image: makutaku/bc-utils:1.3.0
      restart: on-failure
      depends_on:
        - ib_gateway
      volumes:
        - ${MARKET_DATA_PATH}/ibkr/:/bc-utils/data
      network_mode: bridge
      environment:
        TZ: ${TZ}
        BARCHART_DOWNLOADER_FACTORY: create_ibkr_downloader
        BARCHART_DRY_RUN: False
        BARCHART_START_YEAR: 2000
        BARCHART_END_YEAR: 2025
        BARCHART_OUTPUT_DIR: /bc-utils/data
        BARCHART_RANDOM_SLEEP_IN_SEC: 1
        BARCHART_MARKET_FILES: /bc-utils/data/ibkr.config.json
        BARCHART_LOGGING_LEVEL: info
        RUN_ON_STARTUP: True
        BARCHART_BACKUP_DATA: True
        BARCHART_FORCE_BACKUP: False
      logging:
        options:
          max-size: "5m"
          max-file: "3"

volumes:
  mongo_db:
    name: mongo_db_volume${NAME_SUFFIX}
  mongo_conf:
    name: mongo_conf_volume${NAME_SUFFIX}
  gateway_jts:
    name: gateway_jts_volume${NAME_SUFFIX}
  parquet_store:
    name: parquet_store_volume${NAME_SUFFIX}

networks:
  default:
    name: pysystemtrade
  channel:
    driver: bridge
    name: pysystemtrade${NAME_SUFFIX}
    ipam:
      config:
        - subnet: ${IPV4_NETWORK_PART}0.0/16
          gateway: ${IPV4_NETWORK_PART}0.1


 # Backup concept; https://stackoverflow.com/a/56432886/1020693
 # about profile; https://docs.docker.com/compose/profiles/, https://stackoverflow.com/a/65957695/1020693

